<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lynn&#39;s Blog</title>
  
  
  <link href="http://lzreload.com/en/atom.xml" rel="self"/>
  
  <link href="http://lzreload.com/en/"/>
  <updated>2022-05-08T11:54:29.625Z</updated>
  <id>http://lzreload.com/en/</id>
  
  <author>
    <name>Lynn Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>About Kubernetes configuration: ConfigMap</title>
    <link href="http://lzreload.com/en/2022/05/08/About-Kubernetes-configuration-ConfigMap/"/>
    <id>http://lzreload.com/en/2022/05/08/About-Kubernetes-configuration-ConfigMap/</id>
    <published>2022-05-08T11:38:32.000Z</published>
    <updated>2022-05-08T11:54:29.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernete-Configuration-ConfigMap"><a href="#Kubernete-Configuration-ConfigMap" class="headerlink" title="Kubernete Configuration - ConfigMap"></a>Kubernete Configuration - ConfigMap</h1><h1 id="Creating-ConfigMap"><a href="#Creating-ConfigMap" class="headerlink" title="Creating ConfigMap"></a>Creating ConfigMap</h1><h2 id="Create-from-folder"><a href="#Create-from-folder" class="headerlink" title="Create from folder"></a>Create from folder</h2><p><code>kubectl create folder-cm --from-file &lt;folder_name&gt;</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Create with folder</span>$ kubectl create folder-cm --from-file config$ kubectl get cm/folder-cm -o yamlapiVersion: v1data:  config.txt: <span class="token operator">|</span>    <span class="token assign-left variable">Test</span><span class="token operator">=</span>test  test.txt: <span class="token operator">|</span>    <span class="token assign-left variable">DONT</span><span class="token operator">=</span>KNOWkind: ConfigMapmetadata:  creationTimestamp: <span class="token string">"2022-05-02T15:53:44Z"</span>  name: folder-cm  namespace: default  resourceVersion: <span class="token string">"41428"</span>  uid: 9f71a652-2350-4d55-be6e-5ef468cd45f8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Create-from-file"><a href="#Create-from-file" class="headerlink" title="Create from file"></a>Create from file</h2><p>💡Can create with multiple files, if create with all the files in the same folder, it’s same with creating from folder:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Create with file</span>$ kubectl create cm file-cm --from-file config/config.txt --from-file config/test.txt$ kubectl get cm/file-cm -o yamlapiVersion: v1data:  config.txt: <span class="token operator">|</span>    <span class="token assign-left variable">Test</span><span class="token operator">=</span>test  test.txt: <span class="token operator">|</span>    <span class="token assign-left variable">DONT</span><span class="token operator">=</span>KNOWkind: ConfigMapmetadata:  creationTimestamp: <span class="token string">"2022-05-02T16:03:36Z"</span>  name: file-cm  namespace: default  resourceVersion: <span class="token string">"42433"</span>  uid: 17766fc1-cfd5-4b95-b00f-296844f23407<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The name of the file will be the key of key-value pair in <code>ConfigMap</code> while the content of the file will be the value.</p><p>If we want some specific keys, we can create the ConfigMap with given key:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl create cm key-cm --from-file<span class="token operator">=</span>key<span class="token operator">=</span>config.txt$ kubectl get cm/key-cm -o yamlapiVersion: v1data:  key: <span class="token operator">|</span>    <span class="token assign-left variable">DB_URL</span><span class="token operator">=</span>localhost:3306    <span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span>postgreskind: ConfigMapmetadata:  creationTimestamp: <span class="token string">"2022-05-03T15:16:25Z"</span>  name: key-cm  namespace: default  resourceVersion: <span class="token string">"63721"</span>  uid: eb3c93ca-fcfc-42bd-82ce-2d8cddbfc900<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Create-from-key-value-pairs"><a href="#Create-from-key-value-pairs" class="headerlink" title="Create from key-value pairs"></a>Create from key-value pairs</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl create cm value-cm --from-literal<span class="token operator">=</span>Test<span class="token operator">=</span>test$ kubectl get cm/value-cm -o yamlapiVersion: v1data:  Test: <span class="token builtin class-name">test</span>kind: ConfigMapmetadata:  creationTimestamp: <span class="token string">"2022-05-03T15:26:07Z"</span>  name: value-cm  namespace: default  resourceVersion: <span class="token string">"64703"</span>  uid: f5431bb3-6276-48e8-85e0-33b0ef1a7243<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Create-from-env-file"><a href="#Create-from-env-file" class="headerlink" title="Create from env file"></a>Create from env file</h2><p>💡env file can be .<code>env</code> file and <code>.txt</code> file and so on ..</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl create cm env-cm --from-env-file<span class="token operator">=</span>config.txt$ kubectl get cm/env-cm -o yamlapiVersion: v1data:  DB_URL: localhost:3306  DB_USERNAME: postgreskind: ConfigMapmetadata:  creationTimestamp: <span class="token string">"2022-05-03T15:30:49Z"</span>  name: env-cm  namespace: default  resourceVersion: <span class="token string">"65184"</span>  uid: 60dba811-8fa9-4bb1-9e7b-9d45a02009eb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Comparing with <code>Create from file</code>, in which same file is used to create configMap, instead of using filename/given key as key, and file content as value, <code>creating from env file</code> reads the file first, and uses <code>key-value pairs</code> in the file to create ConfigMap.</p><h1 id="Using-configMap"><a href="#Using-configMap" class="headerlink" title="Using configMap"></a>Using configMap</h1><h2 id="Use-ConfigMap-as-files-in-pod"><a href="#Use-ConfigMap-as-files-in-pod" class="headerlink" title="Use ConfigMap as files in pod"></a>Use ConfigMap as files in pod</h2><h3 id="Mount-configMap"><a href="#Mount-configMap" class="headerlink" title="Mount configMap"></a>Mount configMap</h3><p>ConfigMap can be mounted to pods as volumes. Here is the yaml file of a pod who mounts all the ComfigMaps we’ve created above (folder-cm, file-cm, value-cm, env-cm):</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># file-pod.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> folder      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"folder"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> file      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"file"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> value      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"value"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"env"</span>  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> folder    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> folder<span class="token punctuation">-</span>cm  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> file    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>cm  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> value    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> value<span class="token punctuation">-</span>cm  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>cm<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then if we log into the pod and check what is going on inside:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl <span class="token builtin class-name">exec</span> -it pod/file-pod -- <span class="token function">bash</span><span class="token comment"># Inside pod</span>$ tree -L <span class="token number">2</span><span class="token punctuation">..</span>.<span class="token operator">|</span>-- <span class="token function">env</span><span class="token operator">|</span>   <span class="token operator">|</span>-- DB_URL -<span class="token operator">></span> <span class="token punctuation">..</span>data/DB_URL<span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-- DB_USERNAME -<span class="token operator">></span> <span class="token punctuation">..</span>data/DB_USERNAME<span class="token operator">|</span>-- <span class="token function">file</span><span class="token operator">|</span>   <span class="token operator">|</span>-- config.txt -<span class="token operator">></span> <span class="token punctuation">..</span>data/config.txt<span class="token operator">|</span>   <span class="token variable">`</span></span>-- test.txt -<span class="token operator">></span> <span class="token punctuation">..</span>data/test.txt<span class="token operator">|</span>-- folder<span class="token operator">|</span>   <span class="token operator">|</span>-- config.txt -<span class="token operator">></span> <span class="token punctuation">..</span>data/config.txt<span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-- test.txt -<span class="token operator">></span> <span class="token punctuation">..</span>data/test.txt<span class="token operator">|</span>-- value<span class="token operator">|</span>   <span class="token variable">`</span></span>-- Test -<span class="token operator">></span> <span class="token punctuation">..</span>data/Test<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Apparently, no matter from what we created the <code>ConfigMap</code>, the pod who mounted them would generate a file for each key-value pairs in <code>ConfigMap</code> using key as filename and value as content.</p><p>💡Mounting ConfigMap to pods as volumes is setting to <code>Read-Only</code> by default.</p><h3 id="Mount-ConfigMap-with-SubPath"><a href="#Mount-ConfigMap-with-SubPath" class="headerlink" title="Mount ConfigMap with SubPath"></a>Mount ConfigMap with SubPath</h3><p>It’s mentioned that when we mount a <code>ConfigMap</code> to a pod, a folder named as what is specified in <code>spec.containers.volumeMounts.mountPath</code> in the yaml file will be created (if there’s already a folder with same name, the original folder will be covered and the files in this folder cannot been seen anymore.)</p><p>But there will be a situation that we only want to create a file based on the <code>ConfigMap</code> and put it into a folder which already exited. </p><p>For example, folder <code>/etc/nginx/conf.d</code> which already has a file <code>default.conf</code> for Nginx. Instead of making this file disappear, we only want to add a new file into this folder. Then we need <code>SubPath</code>:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># file-pod2</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>pod2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> folder      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"folder"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> file      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/nginx/conf.d/config.txt"</span>      <span class="token key atrule">subPath</span><span class="token punctuation">:</span> <span class="token string">"config.txt"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> value      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"value"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"env"</span>  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> folder    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> folder<span class="token punctuation">-</span>cm  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> file    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>cm  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> value    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> value<span class="token punctuation">-</span>cm  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> env    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>cm<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>According to documentation of <code>Kubernetes 1.24</code>:</p><blockquote><p>The <code>volumeMounts.subPath</code>property specifies a sub-path inside the referenced volume instead of its root.</p></blockquote><p>So, consider each volume is a folder, then for <code>file</code> volume, it contains <code>config.txt</code> file and <code>text.txt</code> file. Then we can use relative path “config.txt” to point to <code>config.txt</code> file of <code>file volume</code> in <code>spec.containers.volumeMounts.subPath</code> property.</p><p>If we apply this yaml file again and log into the new pod:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span><span class="token punctuation">..</span>. <span class="token function">env</span> folder value <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Other folders are still here but just <code>file</code> folder is gone. Then we can check <code>/etc/nginx/conf.d</code> folder.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /etc/nginx/conf.dconfig.txt  default.conf$ <span class="token function">cat</span> /etc/nginx/conf.d/config.txt<span class="token assign-left variable">Test</span><span class="token operator">=</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>default.conf</code> file is still here and only <code>config.txt</code> file which is specified in <code>subPath</code> is create in this folder.</p><h3 id="Update-ConfigMap"><a href="#Update-ConfigMap" class="headerlink" title="Update ConfigMap"></a>Update ConfigMap</h3><p>Now, let’s see what will happen if we try to modify a ConfigMap. We edit two ConfigMaps: <code>file-cm</code> and <code>value-cm</code>:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#file-cm</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">config.txt</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    Test=file-modified</span>  <span class="token key atrule">test.txt</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    DONT=KNOW</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2022-05-02T16:03:36Z"</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>cm  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"281558"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> 17766fc1<span class="token punctuation">-</span>cfd5<span class="token punctuation">-</span>4b95<span class="token punctuation">-</span>b00f<span class="token punctuation">-</span>296844f23407<span class="token comment">#value-cm</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">Test</span><span class="token punctuation">:</span> value<span class="token punctuation">-</span>modified<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2022-05-03T15:26:07Z"</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> value<span class="token punctuation">-</span>cm  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"317489"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> f5431bb3<span class="token punctuation">-</span>6276<span class="token punctuation">-</span>48e8<span class="token punctuation">-</span>85e0<span class="token punctuation">-</span>33b0ef1a7243<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then we can log into file-pod2, which we created in previous section, and check what happened after we modified the <code>ConfigMap</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl <span class="token builtin class-name">exec</span> -it pod/file-pod2 -- <span class="token function">bash</span><span class="token comment"># Content has been updated</span>$ <span class="token function">cat</span> value/Testvalue-modified<span class="token comment"># Content remains the same</span>$ <span class="token function">cat</span> /etc/nginx/conf.d/config.txt<span class="token assign-left variable">Test</span><span class="token operator">=</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>According to the result, after a <code>ConfigMap</code> is changed, the container who mounted this <code>ConfigMap</code> as volume will be updated as well. But there are several exceptions. </p><p>One of these exceptions is that if the container uses the <code>ConfigMap</code> as <code>SubPath</code> volume, then it won’t receive the update.</p><p>💡<code>ConfigMap</code> can be set immutable, <code>immutable ConfigMap</code> will not be watched constantly, which can reduce load on kube-<code>apiserver</code>.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token punctuation">...</span><span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token punctuation">...</span><span class="token key atrule">immutable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Use-ConfigMap-as-environment-variables-in-pod"><a href="#Use-ConfigMap-as-environment-variables-in-pod" class="headerlink" title="Use ConfigMap as environment variables in pod"></a>Use ConfigMap as environment variables in pod</h2><h3 id="Using-specific-values-in-ConfigMap-as-environment-variables"><a href="#Using-specific-values-in-ConfigMap-as-environment-variables" class="headerlink" title="Using specific values in ConfigMap as environment variables"></a>Using specific values in ConfigMap as environment variables</h3><p>In order to use specific values in ConfigMap as <code>environment variables</code> in container, we used <code>spec.containers.env.valueFrom.configMapKeyRef</code>:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># env-pod.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FOLDER_KEY      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> folder<span class="token punctuation">-</span>cm          <span class="token key atrule">key</span><span class="token punctuation">:</span> test.txt    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ENV_KEY      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>cm          <span class="token key atrule">key</span><span class="token punctuation">:</span> DB_URL  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then create a new pod with this yaml file and checke the environment variables of it’s container:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl <span class="token builtin class-name">exec</span> pod/env-pod -- <span class="token function">env</span><span class="token punctuation">..</span>.<span class="token assign-left variable">FOLDER_KEY</span><span class="token operator">=</span>DONT<span class="token operator">=</span>KNOW<span class="token assign-left variable">ENV_KEY</span><span class="token operator">=</span>localhost:3306<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The name of the variables are what we specified with <code>spec.containers.env.name</code>. Then it will search in the target <code>ConfigMap</code> which we specified with <code>spec.env.valueFrom.configMapKeyRef.name</code> in order to find the target key-value pair whose key equals to what we specified in <code>spec.env.valueFrom.configMapKeyRef.key</code>. The value of this environment variable will be the value of target key-value pair.</p><h3 id="Using-all-values-in-ConfigMap-as-environment-variables"><a href="#Using-all-values-in-ConfigMap-as-environment-variables" class="headerlink" title="Using all values in ConfigMap as environment variables"></a>Using all values in ConfigMap as <strong><strong>environment variables</strong></strong></h3><p>Here we will use <code>spec.containers.envFrom.configMapRef</code> to inject all the key-value pairs of a <code>ConfigMap</code> to a container as environment variables:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># all-env-pod.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> all<span class="token punctuation">-</span>env<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">envFrom</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">configMapRef</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>cm  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After this yaml file is applied, the environment variables of the new containers are:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">$ kubectl exec pod/all<span class="token punctuation">-</span>env<span class="token punctuation">-</span>pod <span class="token punctuation">-</span><span class="token punctuation">-</span> env<span class="token punctuation">...</span>DB_URL=localhost<span class="token punctuation">:</span><span class="token number">3306</span>DB_USERNAME=postgres<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>All the key-value pairs of <code>ConfigMap</code> are used as environment variable and their keys are the variable names while their values are the variable values.</p><h3 id="Update-ConfigMap-1"><a href="#Update-ConfigMap-1" class="headerlink" title="Update ConfigMap"></a>Update ConfigMap</h3><p>Same as what we mentioned in previous section - <code>Use ConfigMap as files in pod</code>, we are going to modified the ConfigMap and see what will happen to corresponding containers:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## env-cm</span><span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">DB_URL</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span>3306_modified  <span class="token key atrule">DB_USERNAME</span><span class="token punctuation">:</span> postgres<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2022-05-03T15:30:49Z"</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>cm  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"65184"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> 60dba811<span class="token punctuation">-</span>8fa9<span class="token punctuation">-</span>4bb1<span class="token punctuation">-</span>9e7b<span class="token punctuation">-</span>9d45a02009eb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We changed the value of <code>DB_URL</code>, then environment variables of the previous two containers are:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl <span class="token builtin class-name">exec</span> pod/env-pod -- <span class="token function">env</span><span class="token punctuation">..</span>.<span class="token assign-left variable">FOLDER_KEY</span><span class="token operator">=</span>DONT<span class="token operator">=</span>KNOW<span class="token assign-left variable">ENV_KEY</span><span class="token operator">=</span>localhost:3306<span class="token punctuation">..</span>.$ kubectl <span class="token builtin class-name">exec</span> pod/all-env-pod -- <span class="token function">env</span><span class="token punctuation">..</span>.<span class="token assign-left variable">DB_URL</span><span class="token operator">=</span>localhost:3306<span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span>postgres<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The environment variables who are created from ConfigMap remain the same. This is the other situation that we talked about before in which corresponding containers will not receive the update of the ConfigMap.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernete-Configuration-ConfigMap&quot;&gt;&lt;a href=&quot;#Kubernete-Configuration-ConfigMap&quot; class=&quot;headerlink&quot; title=&quot;Kubernete Configuration - </summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://lzreload.com/en/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Go: About package heap</title>
    <link href="http://lzreload.com/en/2022/04/15/Golang-Heap/"/>
    <id>http://lzreload.com/en/2022/04/15/Golang-Heap/</id>
    <published>2022-04-15T09:21:52.000Z</published>
    <updated>2022-04-19T09:03:55.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>Package <code>heap</code> defines <code>Interface</code> which contains <code>Interface</code> of package <code>sort</code>, and two methods: Push and Pop.</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// go1.18.1/src/container/heap/heap.go</span><span class="token keyword">package</span> heap<span class="token keyword">import</span> <span class="token string">"sort"</span><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>sort<span class="token punctuation">.</span>Interface<span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token comment">// add x as element Len()</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any   <span class="token comment">// remove and return element Len() - 1.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Interface</code> of package <code>sort</code> has 3 methods: Len, Less and Swap :</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> sort<span class="token comment">// An implementation of Interface can be sorted by the routines in this package.</span><span class="token comment">// The methods refer to elements of the underlying collection by integer index.</span><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token comment">// Len is the number of elements in the collection.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">// Less reports whether the element with index i</span><span class="token comment">// must sort before the element with index j.</span><span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token comment">// Swap swaps the elements with indexes i and j.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It mains that in order to implement <code>Interface</code> of package heap, our structure should have 5 methods: Len, Less, Swap, Push and Pop.</p><p>For example:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MinHeap <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MinHeap<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MinHeap<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MinHeap<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MinHeap<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>m <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MinHeap<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>size <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span>last <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">return</span> last<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Above is a new structure named MinHeap which implements all the methods of <code>Interface</code> in package <code>heap</code>.</p><p>Now that we’ve already defined a structure which has all these 5 methods, how do we use this package and how does this package work?</p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>There are 5 public functions in this package:</p><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p><code>Init</code> function will build a heap with given <code>Interface</code> who contains all the data.</p><p>According to the code from this package, <code>Init</code> will perform bottom-up construction in order to build the heap from array with O(n) time complexity. </p><ul><li>It will start from the last non-leaf node and swap it with its smallest child if this subtree does not meet the requirement of <code>Minheap</code>(In this example, we defined a minHeap, whose requirement is the parent node must smaller than all its childs). Here it will call the <code>Less</code> and <code>Swap</code> function which we defined for the <code>MinHeap</code> previously in order to compare and swap two nodes.</li><li>Then it will move to the next non-leaf node and keep swapping until the whole tree become a <code>MinHeap</code></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Init</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// heapify</span>n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">&#123;</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">down</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i0<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>i <span class="token operator">:=</span> i0<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>j1 <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> j1 <span class="token operator">>=</span> n <span class="token operator">||</span> j1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// j1 &lt; 0 after int overflow</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>j <span class="token operator">:=</span> j1 <span class="token comment">// left child</span><span class="token keyword">if</span> j2 <span class="token operator">:=</span> j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j2<span class="token punctuation">,</span> j1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j <span class="token operator">=</span> j2 <span class="token comment">// = 2*i + 2  // right child</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>i <span class="token operator">=</span> j<span class="token punctuation">&#125;</span><span class="token keyword">return</span> i <span class="token operator">></span> i0<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With the <code>MinHeap</code> struct which we’ve just define before:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Heap] Start heap tast, creating original array ..."</span><span class="token punctuation">)</span>mh <span class="token operator">:=</span> <span class="token operator">&amp;</span>MinHeap<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Original array :%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Heap] Start to build minHeap..."</span><span class="token punctuation">)</span>heap<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>Init</code> function will build the heap like this:</p><p><img src="/img/build_heap.png" alt="build_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/build_heap.png" class="lozad post-image"></p><p>The output of previous code will be:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go run main.go<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Start heap tast, creating original array <span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Original array :<span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Start to build minHeap<span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><p><code>Pop</code> function will swap the root with the last node of the array and shorten the length of current array in order to exclude this minimum data in the upcoming action.</p><p>Then it will move the current root down in order to build a new <code>MinHeap</code>.</p><p>After that, this function will call the <code>Pop</code> function we defined for the <code>MinHeap</code> struct before to return the last node which is the minimum data in the structure:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Pop removes and returns the minimum element (according to Less) from the heap.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token comment">// Pop is equivalent to Remove(h, 0).</span><span class="token keyword">func</span> <span class="token function">Pop</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Still, with the same <code>MinHeap</code> struct:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>first <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Pop:%d MinHeap:%v\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>Pop</code> function will process the <code>Minheap</code> as:</p><p><img src="/img/pop_heap.png" alt="pop_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/pop_heap.png" class="lozad post-image"></p><p>The output of previous code will be:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Pop:1 MinHeap:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p><code>Push</code> function will first call the <code>Push</code> method of the given interface(<code>MinHeap</code>) in order to put the new node to the end of the array.</p><p>Then it will keep moving this new node up using <code>MinHeap</code>‘s <code>Less</code> and <code>Swap</code> methods to make sure that the new array still meets the requirement of <code>MinHeap</code>.</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Push pushes the element x onto the heap.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token keyword">func</span> <span class="token function">Push</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> x any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">up</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>i <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// parent</span><span class="token keyword">if</span> i <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>j <span class="token operator">=</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With the same <code>MinHeap</code> struct:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>first <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Pop:%d MinHeap:%v\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Push:%d MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>Push</code> function will process like this:</p><p><img src="/img/push_heap.png" alt="push_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/push_heap.png" class="lozad post-image"></p><p>And the output of previous code will be:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Pop:1 MinHeap:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Push:4 MinHeap:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h3><p><code>Fix</code> function of package heap can be used when one of the node’s value is changed. In this situation, we don’t need to use Init to rebuild the whole tree, we only need to move this node down/up in order to make the array to meet the requirement again:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Fix re-establishes the heap ordering after the element at index i has changed its value.</span><span class="token comment">// Changing the value of the element at index i and then calling Fix is equivalent to,</span><span class="token comment">// but less expensive than, calling Remove(h, i) followed by a Push of the new value.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token keyword">func</span> <span class="token function">Fix</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>down</code> function will return a boolean value to indicate whether the position of target node has been changed in previous process. If not, it means that it might need to move up.</p><p>For example:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Changing one node of minHeap %v..\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap will be fixed:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>heap<span class="token punctuation">.</span><span class="token function">Fix</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap after fix:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Changing one node of minHeap %v..\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>heap<span class="token punctuation">.</span><span class="token function">Fix</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap after fix:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>Fix</code> function will process like this:</p><p><img src="/img/Fix_heap.png" alt="Fix_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/Fix_heap.png" class="lozad post-image"></p><p>And the output of previous code will be:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Changing one node of minHeap <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap will be fixed:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap after fix:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Changing one node of minHeap <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap after fix:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h3><p><code>Remove</code> function is a bit like the combination of <code>Pop</code> and <code>Fix</code>.</p><ul><li>It will shorten the length of the array in order to exclude the last node in the tree (which will be change to the target node in next step)</li><li>Then it will swap the target node with the last node.</li><li>Coz the value the previous position of target node holds has been changed, this function will act like <code>Fix</code> function to make the array to meet the requirement again.</li><li>Finally it will pop out the current last node which is the target node as well.</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Remove removes and returns the element at index i from the heap.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">if</span> n <span class="token operator">!=</span> i <span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For example: </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token comment">//Remove</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Removing one node from minHeap %v..\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>elem <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap after removing element %d :%v\n"</span><span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>Remove</code> function will process like this:</p><p><img src="/img/Remove_heap.png" alt="Remove_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/Remove_heap.png" class="lozad post-image"></p><p>And the output of previous code will be:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Removing one node from minHeap <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap after removing element <span class="token number">2</span> :<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Here is mainly all the thing that I want to talk about package <code>Heap</code>. The complete example code can be found in my repo: <a href="https://github.com/lz-nsc/go-example/tree/main/heap">lz-nsz/go-example/heap</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Interfaces&quot;&gt;&lt;a href=&quot;#Interfaces&quot; class=&quot;headerlink&quot; title=&quot;Interfaces&quot;&gt;&lt;/a&gt;Interfaces&lt;/h2&gt;&lt;p&gt;Package &lt;code&gt;heap&lt;/code&gt; defines &lt;cod</summary>
      
    
    
    
    
    <category term="Golang" scheme="http://lzreload.com/en/tags/Golang/"/>
    
  </entry>
  
</feed>
